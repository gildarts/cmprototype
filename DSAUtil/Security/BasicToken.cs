///////////////////////////////////////////////////////////
//  BasicToken.cs
//  Implementation of the Class BasicToken
//  Generated by Enterprise Architect
//  Created on:      19-六月-2006 下午 02:43:44
//  Original author: Yaoming
///////////////////////////////////////////////////////////

using System;
using System.IO;
using System.Xml;
using System.Xml.XPath;
using System.Text;
using System.Security.Cryptography;
using System.Diagnostics;

namespace FISCA.DSAUtil
{
    /// <summary>
    /// 代表基本的安全代符(SecurityToken)。
    /// </summary>
    /// <remarks>
    /// 在 DSA 架構中，此種代符為最基本的，此代符代表的就是「帳號」與「密碼」。
    /// </remarks>
    /// <include file='Util30\LibDocument\BasicToken.xml' path='Documents/Document[@Name="BasicToken"]/*'/>
    public sealed class BasicToken : XmlBaseObject, ISecurityToken
    {
        /// <summary>
        /// 初始化 <see cref="BasicToken"/> 實體。
        /// </summary>
        /// <param name="userName">使用者名稱。</param>
        /// <param name="password">密碼。</param>
        public BasicToken(string userName, string password)
        {
            InitialToken(userName, password, false);
        }

        /// <summary>
        /// 初始化 <see cref="BasicToken"/> 實體。
        /// </summary>
        /// <param name="userName">使用者名稱。</param>
        /// <param name="password">密碼。</param>
        /// <param name="hashPassword">是否使用 SHA1 雜湊密碼。</param>
        /// <remarks>如果要使用 SHA1 雜湊密碼，資料庫中的密碼欄位應該要使用 SHA1 雜湊計算後再儲存於資料庫，否則密碼驗證將永遠不會通過。</remarks>
        public BasicToken(string userName, string password, bool hashPassword)
        {
            InitialToken(userName, password, hashPassword);
        }

        /// <summary>
        /// 初始化安全代符。
        /// </summary>
        /// <param name="userName"></param>
        /// <param name="password"></param>
        /// <param name="hashPassword">是否使用 SHA1 雜湊密碼。</param>
        /// <remarks>如果要使用 SHA1 雜湊密碼，資料庫中的密碼欄位應該要使用 SHA1 雜湊計算後再儲存於資料庫，否則密碼驗證將永遠不會通過。</remarks>
        private void InitialToken(string userName, string password, bool hashPassword)
        {
            DSXmlHelper token;

            token = new DSXmlHelper("SecurityToken");
            token.SetAttribute(".", "Type", "Basic");
            token.AddElement(".", "UserName", userName);

            if (hashPassword)
                token.AddElement(".", "Password", PkiUtilities.HashString(password));
            else
                token.AddElement(".", "Password", password);

            BaseNode = token.BaseElement;
        }

        /// <summary>
        /// 取得使用者名稱。
        /// </summary>
        public string UserName
        {
            get
            {
                return BaseNode.SelectSingleNode("UserName").InnerText;
            }
        }

        #region ISecurityToken 成員

        /// <include file='Util30\LibDocument\BasicToken.xml' path='Documents/Document[@Name="GetTokenContent"]/*'/>
        public XmlElement GetTokenContent()
        {
            if (BaseNode == null)
                throw new Exception("安全代符未初始化。");

            return BaseNode;
        }

        /// <summary>
        /// 安全代符的類型。
        /// </summary>
        public string TokenType
        {
            get { return BaseNode.SelectSingleNode("@Type").InnerText; }
        }

        public bool Reuseable
        {
            get { return true; }
        }

        #endregion

    }//end BasicToken
}