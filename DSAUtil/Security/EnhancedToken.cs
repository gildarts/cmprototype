///////////////////////////////////////////////////////////
//  EnhancedToken.cs
//  Implementation of the Class EnhancedToken
//  Generated by Enterprise Architect
//  Created on:      19-六月-2006 下午 02:43:55
//  Original author: Yaoming
///////////////////////////////////////////////////////////

using System;
using System.IO;
using System.Xml;
using System.Xml.XPath;
using System.Text;

namespace FISCA.DSAUtil
{
    /*
    string timestamp = DateTime.UtcNow.ToString(DateTimeFormat);

    //將UserName、Password、Timestamp合併，並轉換成Binary資料。
    byte[] RawValue = Encoding.UTF8.GetBytes(_userName + _password + timestamp);

    //呼叫外面的
    byte[] SignedValue = GetSignatureValue(RawValue);

    _securityToken.SetAttribute(".", "Type", "Enhanced");
    _securityToken.AddElement(".", "Timestamp", timestamp);
    _securityToken.AddElement(".", "SignatureValue", Convert.ToBase64String(SignedValue));
     */

    /// <summary>
    /// 代表 DSA 的安全代符(加強)。
    /// </summary>
    public sealed class EnhancedToken : XmlBaseObject, ISecurityToken
    {
        /// <summary>
        /// 初始化 <see cref="EnhancedToken"/> 實體。
        /// </summary>
        private EnhancedToken()
        {
        }

        /// <summary>未完成</summary>
        /// <param name="basicToken"></param>
        /// <param name="signer"></param>
        public static EnhancedToken SignToken(BasicToken basicToken, SignatureRequest signer)
        {
            return null;
        }

        /// <summary>未完成</summary>
        /// <param name="useName"></param>
        /// <param name="password"></param>
        /// <param name="signer"></param>
        public static EnhancedToken SignToken(string useName, string password, SignatureRequest signer)
        {
            return null;
        }

        /// <summary>未完成</summary>
        /// <param name="useName"></param>
        /// <param name="password"></param>
        /// <param name="hashPassword"></param>
        /// <param name="signer"></param>
        public static EnhancedToken SignToken(string useName, string password, bool hashPassword, SignatureRequest signer)
        {
            return null;
        }

        /// <summary>
        /// 取得使用者名稱。
        /// </summary>
        public string UserName
        {
            get
            {
                return BaseNode.SelectSingleNode("UserName").InnerText;
            }
        }

        #region ISecurityToken 成員

        public XmlElement GetTokenContent()
        {
            if (BaseNode == null)
                throw new Exception("安全代符未初始化。");

            return BaseNode;
        }

        public string TokenType
        {
            get { return BaseNode.SelectSingleNode("@Type").InnerText; }
        }

        public bool Reuseable
        {
            get { return true; }
        }

        #endregion
    }//end EnhancedToken
}