///////////////////////////////////////////////////////////
//  PassportToken.cs
//  Implementation of the Class PassportToken
//  Generated by Enterprise Architect
//  Created on:      19-六月-2006 下午 02:43:51
//  Original author: Yaoming
///////////////////////////////////////////////////////////

using System;
using System.IO;
using System.Xml;
using System.Xml.XPath;
using System.Text;

namespace FISCA.DSAUtil
{
    using em = ErrorMessage;

    public sealed class PassportToken : XmlBaseObject, IRenewableToken
    {
        private const string SRV_RequestForPassport = "DS.Security.RequestForPassport";

        private ISecurityToken _originToken;
        private AccessPoint _originServer;

        private PassportToken(XmlElement tokenContent, ISecurityToken originToken, AccessPoint originServer)
        {
            _originToken = originToken;
            _originServer = originServer;

            Load(tokenContent);
        }

        /// <summary>向指定的主機要求通行證。</summary>
        /// <param name="securityToken">安全代符。</param>
        /// <param name="doorway">目標主機位置。</param>
        public static PassportToken RequestPassport(ISecurityToken securityToken, AccessPoint accessPoint)
        {
            DSRequest request = new DSRequest();
            DSResponse dsrsp;
            request.TargetService = SRV_RequestForPassport;
            request.SecurityToken = securityToken.GetTokenContent();

            try
            {
                dsrsp = DSConnection.SendEnvelope(request, accessPoint);

                DSXmlHelper passport = new DSXmlHelper("SecurityToken");
                passport.SetAttribute(".", "Type", "DSAPassport");
                passport.AddElement(".", dsrsp.GetContent().BaseElement);

                PassportToken token = new PassportToken(passport.BaseElement, securityToken, accessPoint);
                return token;
            }
            catch (Exception ex)
            {
                throw new SecurityTokenException(em.Get("RequestPassportError",
                    new Replace("AuthAccessPoint", accessPoint.Name)), ex);
            }
        }

        /// <summary>向指定的主機要求通行證。</summary>
        /// <param name="securityToken">安全代符。</param>
        /// <param name="doorway">目標主機位置。</param>
        public static PassportToken RequestPassport(ISecurityToken securityToken, string doorway)
        {
            return RequestPassport(securityToken, AccessPoint.Resolve(doorway));
        }

        /// <summary>不對密碼進行雜湊運算。</summary>
        /// <param name="userName">不加 Doorway 的使用者名稱，也就是不加「@」之後的字串。</param>
        /// <param name="password">密碼。</param>
        /// <param name="doorway">目標主機位置。</param>
        public static PassportToken RequestPassport(string userName, string password, string doorway)
        {
            return RequestPassport(new BasicToken(userName, password), doorway);
        }

        /// <summary>向指定的主機要求通行證</summary>
        /// <param name="userName">不加 Doorway 的使用者名稱。</param>
        /// <param name="password">密碼。</param>
        /// <param name="hashPassword">是否要對密碼進行雜湊運算。</param>
        /// <param name="doorway">目標主機位置。</param>
        public static PassportToken RequestPassport(string userName, string password, bool hashPassword, string doorway)
        {
            return RequestPassport(new BasicToken(userName, password, hashPassword), doorway);
        }

        #region ISecurityToken 成員

        /// <summary>
        /// Renew security token.
        /// </summary>
        /// <param name="renewChildToken">是否 Renew Base 的 Security Token。</param>
        private void RenewToken(bool renewChildToken)
        {
            try
            {
                PassportToken pToken = RequestPassport(_originToken, _originServer);
                Load(pToken.BaseNode);
            }
            catch (Exception ex)
            {
                if (ex.InnerException != null && renewChildToken)
                {
                    DSAServerException dsaexp = ex.InnerException as DSAServerException;
                    if (dsaexp != null)
                    {
                        if (dsaexp.ServerStatus == DSAServerStatus.PassportExpire || dsaexp.ServerStatus == DSAServerStatus.SessionExpire)
                        {
                            IRenewableToken renewable = _originToken as IRenewableToken;
                            try
                            {
                                renewable.RenewToken();
                                this.RenewToken(false);
                            }
                            catch (Exception rex)
                            {
                                throw new SecurityTokenException(em.Get("RenewDSAPassportFail"), rex);
                            }
                        }
                    }
                }

                throw ex;
            }
        }

        /// <summary>
        /// Renew security token.
        /// </summary>
        public void RenewToken()
        {
            RenewToken(true);
        }

        public XmlElement GetTokenContent()
        {
            return BaseNode;
        }

        public string TokenType
        {
            get { return "DSAPassport"; }
        }

        public bool Reuseable
        {
            get { return true; }
        }

        #endregion
    }//end PassportToken
}